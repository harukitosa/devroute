// Code generated by entc, DO NOT EDIT.

package ent

import (
	"devroute/ent/companyuser"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// CompanyUser is the model entity for the CompanyUser schema.
type CompanyUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastNameFurigana holds the value of the "last_name_furigana" field.
	LastNameFurigana string `json:"last_name_furigana,omitempty"`
	// FirstNameFurigana holds the value of the "first_name_furigana" field.
	FirstNameFurigana string `json:"first_name_furigana,omitempty"`
	// ProfileName holds the value of the "profile_name" field.
	ProfileName string `json:"profile_name,omitempty"`
	// IconURL holds the value of the "icon_url" field.
	IconURL string `json:"icon_url,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender companyuser.Gender `json:"gender,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CompanyUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case companyuser.FieldID:
			values[i] = new(sql.NullInt64)
		case companyuser.FieldLastName, companyuser.FieldFirstName, companyuser.FieldLastNameFurigana, companyuser.FieldFirstNameFurigana, companyuser.FieldProfileName, companyuser.FieldIconURL, companyuser.FieldGender:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CompanyUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CompanyUser fields.
func (cu *CompanyUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case companyuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cu.ID = int(value.Int64)
		case companyuser.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				cu.LastName = value.String
			}
		case companyuser.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				cu.FirstName = value.String
			}
		case companyuser.FieldLastNameFurigana:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name_furigana", values[i])
			} else if value.Valid {
				cu.LastNameFurigana = value.String
			}
		case companyuser.FieldFirstNameFurigana:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name_furigana", values[i])
			} else if value.Valid {
				cu.FirstNameFurigana = value.String
			}
		case companyuser.FieldProfileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile_name", values[i])
			} else if value.Valid {
				cu.ProfileName = value.String
			}
		case companyuser.FieldIconURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon_url", values[i])
			} else if value.Valid {
				cu.IconURL = value.String
			}
		case companyuser.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				cu.Gender = companyuser.Gender(value.String)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CompanyUser.
// Note that you need to call CompanyUser.Unwrap() before calling this method if this CompanyUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (cu *CompanyUser) Update() *CompanyUserUpdateOne {
	return (&CompanyUserClient{config: cu.config}).UpdateOne(cu)
}

// Unwrap unwraps the CompanyUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cu *CompanyUser) Unwrap() *CompanyUser {
	tx, ok := cu.config.driver.(*txDriver)
	if !ok {
		panic("ent: CompanyUser is not a transactional entity")
	}
	cu.config.driver = tx.drv
	return cu
}

// String implements the fmt.Stringer.
func (cu *CompanyUser) String() string {
	var builder strings.Builder
	builder.WriteString("CompanyUser(")
	builder.WriteString(fmt.Sprintf("id=%v", cu.ID))
	builder.WriteString(", last_name=")
	builder.WriteString(cu.LastName)
	builder.WriteString(", first_name=")
	builder.WriteString(cu.FirstName)
	builder.WriteString(", last_name_furigana=")
	builder.WriteString(cu.LastNameFurigana)
	builder.WriteString(", first_name_furigana=")
	builder.WriteString(cu.FirstNameFurigana)
	builder.WriteString(", profile_name=")
	builder.WriteString(cu.ProfileName)
	builder.WriteString(", icon_url=")
	builder.WriteString(cu.IconURL)
	builder.WriteString(", gender=")
	builder.WriteString(fmt.Sprintf("%v", cu.Gender))
	builder.WriteByte(')')
	return builder.String()
}

// CompanyUsers is a parsable slice of CompanyUser.
type CompanyUsers []*CompanyUser

func (cu CompanyUsers) config(cfg config) {
	for _i := range cu {
		cu[_i].config = cfg
	}
}
