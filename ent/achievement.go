// Code generated by entc, DO NOT EDIT.

package ent

import (
	"devroute/ent/achievement"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Achievement is the model entity for the Achievement schema.
type Achievement struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Achievement) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case achievement.FieldID:
			values[i] = new(sql.NullInt64)
		case achievement.FieldTitle, achievement.FieldContent:
			values[i] = new(sql.NullString)
		case achievement.FieldStartTime, achievement.FieldEndTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Achievement", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Achievement fields.
func (a *Achievement) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case achievement.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case achievement.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				a.Title = value.String
			}
		case achievement.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				a.StartTime = value.Time
			}
		case achievement.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				a.EndTime = value.Time
			}
		case achievement.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				a.Content = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Achievement.
// Note that you need to call Achievement.Unwrap() before calling this method if this Achievement
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Achievement) Update() *AchievementUpdateOne {
	return (&AchievementClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Achievement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Achievement) Unwrap() *Achievement {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Achievement is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Achievement) String() string {
	var builder strings.Builder
	builder.WriteString("Achievement(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", title=")
	builder.WriteString(a.Title)
	builder.WriteString(", start_time=")
	builder.WriteString(a.StartTime.Format(time.ANSIC))
	builder.WriteString(", end_time=")
	builder.WriteString(a.EndTime.Format(time.ANSIC))
	builder.WriteString(", content=")
	builder.WriteString(a.Content)
	builder.WriteByte(')')
	return builder.String()
}

// Achievements is a parsable slice of Achievement.
type Achievements []*Achievement

func (a Achievements) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
