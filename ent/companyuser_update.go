// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"devroute/ent/companyuser"
	"devroute/ent/predicate"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyUserUpdate is the builder for updating CompanyUser entities.
type CompanyUserUpdate struct {
	config
	hooks    []Hook
	mutation *CompanyUserMutation
}

// Where appends a list predicates to the CompanyUserUpdate builder.
func (cuu *CompanyUserUpdate) Where(ps ...predicate.CompanyUser) *CompanyUserUpdate {
	cuu.mutation.Where(ps...)
	return cuu
}

// SetLastName sets the "last_name" field.
func (cuu *CompanyUserUpdate) SetLastName(s string) *CompanyUserUpdate {
	cuu.mutation.SetLastName(s)
	return cuu
}

// SetFirstName sets the "first_name" field.
func (cuu *CompanyUserUpdate) SetFirstName(s string) *CompanyUserUpdate {
	cuu.mutation.SetFirstName(s)
	return cuu
}

// SetLastNameFurigana sets the "last_name_furigana" field.
func (cuu *CompanyUserUpdate) SetLastNameFurigana(s string) *CompanyUserUpdate {
	cuu.mutation.SetLastNameFurigana(s)
	return cuu
}

// SetFirstNameFurigana sets the "first_name_furigana" field.
func (cuu *CompanyUserUpdate) SetFirstNameFurigana(s string) *CompanyUserUpdate {
	cuu.mutation.SetFirstNameFurigana(s)
	return cuu
}

// SetProfileName sets the "profile_name" field.
func (cuu *CompanyUserUpdate) SetProfileName(s string) *CompanyUserUpdate {
	cuu.mutation.SetProfileName(s)
	return cuu
}

// SetIconURL sets the "icon_url" field.
func (cuu *CompanyUserUpdate) SetIconURL(s string) *CompanyUserUpdate {
	cuu.mutation.SetIconURL(s)
	return cuu
}

// SetGender sets the "gender" field.
func (cuu *CompanyUserUpdate) SetGender(c companyuser.Gender) *CompanyUserUpdate {
	cuu.mutation.SetGender(c)
	return cuu
}

// Mutation returns the CompanyUserMutation object of the builder.
func (cuu *CompanyUserUpdate) Mutation() *CompanyUserMutation {
	return cuu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cuu *CompanyUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cuu.hooks) == 0 {
		if err = cuu.check(); err != nil {
			return 0, err
		}
		affected, err = cuu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CompanyUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuu.check(); err != nil {
				return 0, err
			}
			cuu.mutation = mutation
			affected, err = cuu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cuu.hooks) - 1; i >= 0; i-- {
			if cuu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuu *CompanyUserUpdate) SaveX(ctx context.Context) int {
	affected, err := cuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cuu *CompanyUserUpdate) Exec(ctx context.Context) error {
	_, err := cuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuu *CompanyUserUpdate) ExecX(ctx context.Context) {
	if err := cuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuu *CompanyUserUpdate) check() error {
	if v, ok := cuu.mutation.LastName(); ok {
		if err := companyuser.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf("ent: validator failed for field \"last_name\": %w", err)}
		}
	}
	if v, ok := cuu.mutation.FirstName(); ok {
		if err := companyuser.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf("ent: validator failed for field \"first_name\": %w", err)}
		}
	}
	if v, ok := cuu.mutation.LastNameFurigana(); ok {
		if err := companyuser.LastNameFuriganaValidator(v); err != nil {
			return &ValidationError{Name: "last_name_furigana", err: fmt.Errorf("ent: validator failed for field \"last_name_furigana\": %w", err)}
		}
	}
	if v, ok := cuu.mutation.FirstNameFurigana(); ok {
		if err := companyuser.FirstNameFuriganaValidator(v); err != nil {
			return &ValidationError{Name: "first_name_furigana", err: fmt.Errorf("ent: validator failed for field \"first_name_furigana\": %w", err)}
		}
	}
	if v, ok := cuu.mutation.ProfileName(); ok {
		if err := companyuser.ProfileNameValidator(v); err != nil {
			return &ValidationError{Name: "profile_name", err: fmt.Errorf("ent: validator failed for field \"profile_name\": %w", err)}
		}
	}
	if v, ok := cuu.mutation.IconURL(); ok {
		if err := companyuser.IconURLValidator(v); err != nil {
			return &ValidationError{Name: "icon_url", err: fmt.Errorf("ent: validator failed for field \"icon_url\": %w", err)}
		}
	}
	if v, ok := cuu.mutation.Gender(); ok {
		if err := companyuser.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf("ent: validator failed for field \"gender\": %w", err)}
		}
	}
	return nil
}

func (cuu *CompanyUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   companyuser.Table,
			Columns: companyuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: companyuser.FieldID,
			},
		},
	}
	if ps := cuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuu.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: companyuser.FieldLastName,
		})
	}
	if value, ok := cuu.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: companyuser.FieldFirstName,
		})
	}
	if value, ok := cuu.mutation.LastNameFurigana(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: companyuser.FieldLastNameFurigana,
		})
	}
	if value, ok := cuu.mutation.FirstNameFurigana(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: companyuser.FieldFirstNameFurigana,
		})
	}
	if value, ok := cuu.mutation.ProfileName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: companyuser.FieldProfileName,
		})
	}
	if value, ok := cuu.mutation.IconURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: companyuser.FieldIconURL,
		})
	}
	if value, ok := cuu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: companyuser.FieldGender,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{companyuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CompanyUserUpdateOne is the builder for updating a single CompanyUser entity.
type CompanyUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompanyUserMutation
}

// SetLastName sets the "last_name" field.
func (cuuo *CompanyUserUpdateOne) SetLastName(s string) *CompanyUserUpdateOne {
	cuuo.mutation.SetLastName(s)
	return cuuo
}

// SetFirstName sets the "first_name" field.
func (cuuo *CompanyUserUpdateOne) SetFirstName(s string) *CompanyUserUpdateOne {
	cuuo.mutation.SetFirstName(s)
	return cuuo
}

// SetLastNameFurigana sets the "last_name_furigana" field.
func (cuuo *CompanyUserUpdateOne) SetLastNameFurigana(s string) *CompanyUserUpdateOne {
	cuuo.mutation.SetLastNameFurigana(s)
	return cuuo
}

// SetFirstNameFurigana sets the "first_name_furigana" field.
func (cuuo *CompanyUserUpdateOne) SetFirstNameFurigana(s string) *CompanyUserUpdateOne {
	cuuo.mutation.SetFirstNameFurigana(s)
	return cuuo
}

// SetProfileName sets the "profile_name" field.
func (cuuo *CompanyUserUpdateOne) SetProfileName(s string) *CompanyUserUpdateOne {
	cuuo.mutation.SetProfileName(s)
	return cuuo
}

// SetIconURL sets the "icon_url" field.
func (cuuo *CompanyUserUpdateOne) SetIconURL(s string) *CompanyUserUpdateOne {
	cuuo.mutation.SetIconURL(s)
	return cuuo
}

// SetGender sets the "gender" field.
func (cuuo *CompanyUserUpdateOne) SetGender(c companyuser.Gender) *CompanyUserUpdateOne {
	cuuo.mutation.SetGender(c)
	return cuuo
}

// Mutation returns the CompanyUserMutation object of the builder.
func (cuuo *CompanyUserUpdateOne) Mutation() *CompanyUserMutation {
	return cuuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuuo *CompanyUserUpdateOne) Select(field string, fields ...string) *CompanyUserUpdateOne {
	cuuo.fields = append([]string{field}, fields...)
	return cuuo
}

// Save executes the query and returns the updated CompanyUser entity.
func (cuuo *CompanyUserUpdateOne) Save(ctx context.Context) (*CompanyUser, error) {
	var (
		err  error
		node *CompanyUser
	)
	if len(cuuo.hooks) == 0 {
		if err = cuuo.check(); err != nil {
			return nil, err
		}
		node, err = cuuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CompanyUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuuo.check(); err != nil {
				return nil, err
			}
			cuuo.mutation = mutation
			node, err = cuuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuuo.hooks) - 1; i >= 0; i-- {
			if cuuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuuo *CompanyUserUpdateOne) SaveX(ctx context.Context) *CompanyUser {
	node, err := cuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuuo *CompanyUserUpdateOne) Exec(ctx context.Context) error {
	_, err := cuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuuo *CompanyUserUpdateOne) ExecX(ctx context.Context) {
	if err := cuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuuo *CompanyUserUpdateOne) check() error {
	if v, ok := cuuo.mutation.LastName(); ok {
		if err := companyuser.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf("ent: validator failed for field \"last_name\": %w", err)}
		}
	}
	if v, ok := cuuo.mutation.FirstName(); ok {
		if err := companyuser.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf("ent: validator failed for field \"first_name\": %w", err)}
		}
	}
	if v, ok := cuuo.mutation.LastNameFurigana(); ok {
		if err := companyuser.LastNameFuriganaValidator(v); err != nil {
			return &ValidationError{Name: "last_name_furigana", err: fmt.Errorf("ent: validator failed for field \"last_name_furigana\": %w", err)}
		}
	}
	if v, ok := cuuo.mutation.FirstNameFurigana(); ok {
		if err := companyuser.FirstNameFuriganaValidator(v); err != nil {
			return &ValidationError{Name: "first_name_furigana", err: fmt.Errorf("ent: validator failed for field \"first_name_furigana\": %w", err)}
		}
	}
	if v, ok := cuuo.mutation.ProfileName(); ok {
		if err := companyuser.ProfileNameValidator(v); err != nil {
			return &ValidationError{Name: "profile_name", err: fmt.Errorf("ent: validator failed for field \"profile_name\": %w", err)}
		}
	}
	if v, ok := cuuo.mutation.IconURL(); ok {
		if err := companyuser.IconURLValidator(v); err != nil {
			return &ValidationError{Name: "icon_url", err: fmt.Errorf("ent: validator failed for field \"icon_url\": %w", err)}
		}
	}
	if v, ok := cuuo.mutation.Gender(); ok {
		if err := companyuser.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf("ent: validator failed for field \"gender\": %w", err)}
		}
	}
	return nil
}

func (cuuo *CompanyUserUpdateOne) sqlSave(ctx context.Context) (_node *CompanyUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   companyuser.Table,
			Columns: companyuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: companyuser.FieldID,
			},
		},
	}
	id, ok := cuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CompanyUser.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, companyuser.FieldID)
		for _, f := range fields {
			if !companyuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != companyuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuuo.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: companyuser.FieldLastName,
		})
	}
	if value, ok := cuuo.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: companyuser.FieldFirstName,
		})
	}
	if value, ok := cuuo.mutation.LastNameFurigana(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: companyuser.FieldLastNameFurigana,
		})
	}
	if value, ok := cuuo.mutation.FirstNameFurigana(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: companyuser.FieldFirstNameFurigana,
		})
	}
	if value, ok := cuuo.mutation.ProfileName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: companyuser.FieldProfileName,
		})
	}
	if value, ok := cuuo.mutation.IconURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: companyuser.FieldIconURL,
		})
	}
	if value, ok := cuuo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: companyuser.FieldGender,
		})
	}
	_node = &CompanyUser{config: cuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{companyuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
