// Code generated by entc, DO NOT EDIT.

package developer

import (
	"devroute/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// LastNameFurigana applies equality check predicate on the "last_name_furigana" field. It's identical to LastNameFuriganaEQ.
func LastNameFurigana(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastNameFurigana), v))
	})
}

// FirstNameFurigana applies equality check predicate on the "first_name_furigana" field. It's identical to FirstNameFuriganaEQ.
func FirstNameFurigana(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstNameFurigana), v))
	})
}

// ProfileName applies equality check predicate on the "profile_name" field. It's identical to ProfileNameEQ.
func ProfileName(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProfileName), v))
	})
}

// IconURL applies equality check predicate on the "icon_url" field. It's identical to IconURLEQ.
func IconURL(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIconURL), v))
	})
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastName), v))
	})
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.Developer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Developer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastName), v...))
	})
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.Developer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Developer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastName), v...))
	})
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastName), v))
	})
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastName), v))
	})
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastName), v))
	})
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastName), v))
	})
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastName), v))
	})
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastName), v))
	})
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastName), v))
	})
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastName), v))
	})
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastName), v))
	})
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstName), v))
	})
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.Developer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Developer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstName), v...))
	})
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.Developer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Developer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstName), v...))
	})
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstName), v))
	})
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstName), v))
	})
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstName), v))
	})
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstName), v))
	})
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstName), v))
	})
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstName), v))
	})
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstName), v))
	})
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstName), v))
	})
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstName), v))
	})
}

// LastNameFuriganaEQ applies the EQ predicate on the "last_name_furigana" field.
func LastNameFuriganaEQ(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastNameFurigana), v))
	})
}

// LastNameFuriganaNEQ applies the NEQ predicate on the "last_name_furigana" field.
func LastNameFuriganaNEQ(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastNameFurigana), v))
	})
}

// LastNameFuriganaIn applies the In predicate on the "last_name_furigana" field.
func LastNameFuriganaIn(vs ...string) predicate.Developer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Developer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastNameFurigana), v...))
	})
}

// LastNameFuriganaNotIn applies the NotIn predicate on the "last_name_furigana" field.
func LastNameFuriganaNotIn(vs ...string) predicate.Developer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Developer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastNameFurigana), v...))
	})
}

// LastNameFuriganaGT applies the GT predicate on the "last_name_furigana" field.
func LastNameFuriganaGT(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastNameFurigana), v))
	})
}

// LastNameFuriganaGTE applies the GTE predicate on the "last_name_furigana" field.
func LastNameFuriganaGTE(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastNameFurigana), v))
	})
}

// LastNameFuriganaLT applies the LT predicate on the "last_name_furigana" field.
func LastNameFuriganaLT(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastNameFurigana), v))
	})
}

// LastNameFuriganaLTE applies the LTE predicate on the "last_name_furigana" field.
func LastNameFuriganaLTE(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastNameFurigana), v))
	})
}

// LastNameFuriganaContains applies the Contains predicate on the "last_name_furigana" field.
func LastNameFuriganaContains(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastNameFurigana), v))
	})
}

// LastNameFuriganaHasPrefix applies the HasPrefix predicate on the "last_name_furigana" field.
func LastNameFuriganaHasPrefix(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastNameFurigana), v))
	})
}

// LastNameFuriganaHasSuffix applies the HasSuffix predicate on the "last_name_furigana" field.
func LastNameFuriganaHasSuffix(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastNameFurigana), v))
	})
}

// LastNameFuriganaEqualFold applies the EqualFold predicate on the "last_name_furigana" field.
func LastNameFuriganaEqualFold(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastNameFurigana), v))
	})
}

// LastNameFuriganaContainsFold applies the ContainsFold predicate on the "last_name_furigana" field.
func LastNameFuriganaContainsFold(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastNameFurigana), v))
	})
}

// FirstNameFuriganaEQ applies the EQ predicate on the "first_name_furigana" field.
func FirstNameFuriganaEQ(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstNameFurigana), v))
	})
}

// FirstNameFuriganaNEQ applies the NEQ predicate on the "first_name_furigana" field.
func FirstNameFuriganaNEQ(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstNameFurigana), v))
	})
}

// FirstNameFuriganaIn applies the In predicate on the "first_name_furigana" field.
func FirstNameFuriganaIn(vs ...string) predicate.Developer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Developer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstNameFurigana), v...))
	})
}

// FirstNameFuriganaNotIn applies the NotIn predicate on the "first_name_furigana" field.
func FirstNameFuriganaNotIn(vs ...string) predicate.Developer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Developer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstNameFurigana), v...))
	})
}

// FirstNameFuriganaGT applies the GT predicate on the "first_name_furigana" field.
func FirstNameFuriganaGT(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstNameFurigana), v))
	})
}

// FirstNameFuriganaGTE applies the GTE predicate on the "first_name_furigana" field.
func FirstNameFuriganaGTE(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstNameFurigana), v))
	})
}

// FirstNameFuriganaLT applies the LT predicate on the "first_name_furigana" field.
func FirstNameFuriganaLT(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstNameFurigana), v))
	})
}

// FirstNameFuriganaLTE applies the LTE predicate on the "first_name_furigana" field.
func FirstNameFuriganaLTE(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstNameFurigana), v))
	})
}

// FirstNameFuriganaContains applies the Contains predicate on the "first_name_furigana" field.
func FirstNameFuriganaContains(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstNameFurigana), v))
	})
}

// FirstNameFuriganaHasPrefix applies the HasPrefix predicate on the "first_name_furigana" field.
func FirstNameFuriganaHasPrefix(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstNameFurigana), v))
	})
}

// FirstNameFuriganaHasSuffix applies the HasSuffix predicate on the "first_name_furigana" field.
func FirstNameFuriganaHasSuffix(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstNameFurigana), v))
	})
}

// FirstNameFuriganaEqualFold applies the EqualFold predicate on the "first_name_furigana" field.
func FirstNameFuriganaEqualFold(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstNameFurigana), v))
	})
}

// FirstNameFuriganaContainsFold applies the ContainsFold predicate on the "first_name_furigana" field.
func FirstNameFuriganaContainsFold(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstNameFurigana), v))
	})
}

// ProfileNameEQ applies the EQ predicate on the "profile_name" field.
func ProfileNameEQ(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProfileName), v))
	})
}

// ProfileNameNEQ applies the NEQ predicate on the "profile_name" field.
func ProfileNameNEQ(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProfileName), v))
	})
}

// ProfileNameIn applies the In predicate on the "profile_name" field.
func ProfileNameIn(vs ...string) predicate.Developer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Developer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProfileName), v...))
	})
}

// ProfileNameNotIn applies the NotIn predicate on the "profile_name" field.
func ProfileNameNotIn(vs ...string) predicate.Developer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Developer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProfileName), v...))
	})
}

// ProfileNameGT applies the GT predicate on the "profile_name" field.
func ProfileNameGT(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProfileName), v))
	})
}

// ProfileNameGTE applies the GTE predicate on the "profile_name" field.
func ProfileNameGTE(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProfileName), v))
	})
}

// ProfileNameLT applies the LT predicate on the "profile_name" field.
func ProfileNameLT(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProfileName), v))
	})
}

// ProfileNameLTE applies the LTE predicate on the "profile_name" field.
func ProfileNameLTE(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProfileName), v))
	})
}

// ProfileNameContains applies the Contains predicate on the "profile_name" field.
func ProfileNameContains(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProfileName), v))
	})
}

// ProfileNameHasPrefix applies the HasPrefix predicate on the "profile_name" field.
func ProfileNameHasPrefix(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProfileName), v))
	})
}

// ProfileNameHasSuffix applies the HasSuffix predicate on the "profile_name" field.
func ProfileNameHasSuffix(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProfileName), v))
	})
}

// ProfileNameEqualFold applies the EqualFold predicate on the "profile_name" field.
func ProfileNameEqualFold(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProfileName), v))
	})
}

// ProfileNameContainsFold applies the ContainsFold predicate on the "profile_name" field.
func ProfileNameContainsFold(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProfileName), v))
	})
}

// IconURLEQ applies the EQ predicate on the "icon_url" field.
func IconURLEQ(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIconURL), v))
	})
}

// IconURLNEQ applies the NEQ predicate on the "icon_url" field.
func IconURLNEQ(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIconURL), v))
	})
}

// IconURLIn applies the In predicate on the "icon_url" field.
func IconURLIn(vs ...string) predicate.Developer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Developer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIconURL), v...))
	})
}

// IconURLNotIn applies the NotIn predicate on the "icon_url" field.
func IconURLNotIn(vs ...string) predicate.Developer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Developer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIconURL), v...))
	})
}

// IconURLGT applies the GT predicate on the "icon_url" field.
func IconURLGT(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIconURL), v))
	})
}

// IconURLGTE applies the GTE predicate on the "icon_url" field.
func IconURLGTE(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIconURL), v))
	})
}

// IconURLLT applies the LT predicate on the "icon_url" field.
func IconURLLT(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIconURL), v))
	})
}

// IconURLLTE applies the LTE predicate on the "icon_url" field.
func IconURLLTE(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIconURL), v))
	})
}

// IconURLContains applies the Contains predicate on the "icon_url" field.
func IconURLContains(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIconURL), v))
	})
}

// IconURLHasPrefix applies the HasPrefix predicate on the "icon_url" field.
func IconURLHasPrefix(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIconURL), v))
	})
}

// IconURLHasSuffix applies the HasSuffix predicate on the "icon_url" field.
func IconURLHasSuffix(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIconURL), v))
	})
}

// IconURLEqualFold applies the EqualFold predicate on the "icon_url" field.
func IconURLEqualFold(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIconURL), v))
	})
}

// IconURLContainsFold applies the ContainsFold predicate on the "icon_url" field.
func IconURLContainsFold(v string) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIconURL), v))
	})
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v Gender) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v Gender) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGender), v))
	})
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...Gender) predicate.Developer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Developer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGender), v...))
	})
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...Gender) predicate.Developer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Developer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGender), v...))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Developer) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Developer) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Developer) predicate.Developer {
	return predicate.Developer(func(s *sql.Selector) {
		p(s.Not())
	})
}
