// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"devroute/ent/companyuser"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyUserCreate is the builder for creating a CompanyUser entity.
type CompanyUserCreate struct {
	config
	mutation *CompanyUserMutation
	hooks    []Hook
}

// SetLastName sets the "last_name" field.
func (cuc *CompanyUserCreate) SetLastName(s string) *CompanyUserCreate {
	cuc.mutation.SetLastName(s)
	return cuc
}

// SetFirstName sets the "first_name" field.
func (cuc *CompanyUserCreate) SetFirstName(s string) *CompanyUserCreate {
	cuc.mutation.SetFirstName(s)
	return cuc
}

// SetLastNameFurigana sets the "last_name_furigana" field.
func (cuc *CompanyUserCreate) SetLastNameFurigana(s string) *CompanyUserCreate {
	cuc.mutation.SetLastNameFurigana(s)
	return cuc
}

// SetFirstNameFurigana sets the "first_name_furigana" field.
func (cuc *CompanyUserCreate) SetFirstNameFurigana(s string) *CompanyUserCreate {
	cuc.mutation.SetFirstNameFurigana(s)
	return cuc
}

// SetProfileName sets the "profile_name" field.
func (cuc *CompanyUserCreate) SetProfileName(s string) *CompanyUserCreate {
	cuc.mutation.SetProfileName(s)
	return cuc
}

// SetIconURL sets the "icon_url" field.
func (cuc *CompanyUserCreate) SetIconURL(s string) *CompanyUserCreate {
	cuc.mutation.SetIconURL(s)
	return cuc
}

// SetGender sets the "gender" field.
func (cuc *CompanyUserCreate) SetGender(c companyuser.Gender) *CompanyUserCreate {
	cuc.mutation.SetGender(c)
	return cuc
}

// Mutation returns the CompanyUserMutation object of the builder.
func (cuc *CompanyUserCreate) Mutation() *CompanyUserMutation {
	return cuc.mutation
}

// Save creates the CompanyUser in the database.
func (cuc *CompanyUserCreate) Save(ctx context.Context) (*CompanyUser, error) {
	var (
		err  error
		node *CompanyUser
	)
	if len(cuc.hooks) == 0 {
		if err = cuc.check(); err != nil {
			return nil, err
		}
		node, err = cuc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CompanyUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuc.check(); err != nil {
				return nil, err
			}
			cuc.mutation = mutation
			if node, err = cuc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cuc.hooks) - 1; i >= 0; i-- {
			if cuc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cuc *CompanyUserCreate) SaveX(ctx context.Context) *CompanyUser {
	v, err := cuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cuc *CompanyUserCreate) Exec(ctx context.Context) error {
	_, err := cuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuc *CompanyUserCreate) ExecX(ctx context.Context) {
	if err := cuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuc *CompanyUserCreate) check() error {
	if _, ok := cuc.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "last_name"`)}
	}
	if v, ok := cuc.mutation.LastName(); ok {
		if err := companyuser.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "last_name": %w`, err)}
		}
	}
	if _, ok := cuc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "first_name"`)}
	}
	if v, ok := cuc.mutation.FirstName(); ok {
		if err := companyuser.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "first_name": %w`, err)}
		}
	}
	if _, ok := cuc.mutation.LastNameFurigana(); !ok {
		return &ValidationError{Name: "last_name_furigana", err: errors.New(`ent: missing required field "last_name_furigana"`)}
	}
	if v, ok := cuc.mutation.LastNameFurigana(); ok {
		if err := companyuser.LastNameFuriganaValidator(v); err != nil {
			return &ValidationError{Name: "last_name_furigana", err: fmt.Errorf(`ent: validator failed for field "last_name_furigana": %w`, err)}
		}
	}
	if _, ok := cuc.mutation.FirstNameFurigana(); !ok {
		return &ValidationError{Name: "first_name_furigana", err: errors.New(`ent: missing required field "first_name_furigana"`)}
	}
	if v, ok := cuc.mutation.FirstNameFurigana(); ok {
		if err := companyuser.FirstNameFuriganaValidator(v); err != nil {
			return &ValidationError{Name: "first_name_furigana", err: fmt.Errorf(`ent: validator failed for field "first_name_furigana": %w`, err)}
		}
	}
	if _, ok := cuc.mutation.ProfileName(); !ok {
		return &ValidationError{Name: "profile_name", err: errors.New(`ent: missing required field "profile_name"`)}
	}
	if v, ok := cuc.mutation.ProfileName(); ok {
		if err := companyuser.ProfileNameValidator(v); err != nil {
			return &ValidationError{Name: "profile_name", err: fmt.Errorf(`ent: validator failed for field "profile_name": %w`, err)}
		}
	}
	if _, ok := cuc.mutation.IconURL(); !ok {
		return &ValidationError{Name: "icon_url", err: errors.New(`ent: missing required field "icon_url"`)}
	}
	if v, ok := cuc.mutation.IconURL(); ok {
		if err := companyuser.IconURLValidator(v); err != nil {
			return &ValidationError{Name: "icon_url", err: fmt.Errorf(`ent: validator failed for field "icon_url": %w`, err)}
		}
	}
	if _, ok := cuc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "gender"`)}
	}
	if v, ok := cuc.mutation.Gender(); ok {
		if err := companyuser.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "gender": %w`, err)}
		}
	}
	return nil
}

func (cuc *CompanyUserCreate) sqlSave(ctx context.Context) (*CompanyUser, error) {
	_node, _spec := cuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cuc *CompanyUserCreate) createSpec() (*CompanyUser, *sqlgraph.CreateSpec) {
	var (
		_node = &CompanyUser{config: cuc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: companyuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: companyuser.FieldID,
			},
		}
	)
	if value, ok := cuc.mutation.LastName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: companyuser.FieldLastName,
		})
		_node.LastName = value
	}
	if value, ok := cuc.mutation.FirstName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: companyuser.FieldFirstName,
		})
		_node.FirstName = value
	}
	if value, ok := cuc.mutation.LastNameFurigana(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: companyuser.FieldLastNameFurigana,
		})
		_node.LastNameFurigana = value
	}
	if value, ok := cuc.mutation.FirstNameFurigana(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: companyuser.FieldFirstNameFurigana,
		})
		_node.FirstNameFurigana = value
	}
	if value, ok := cuc.mutation.ProfileName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: companyuser.FieldProfileName,
		})
		_node.ProfileName = value
	}
	if value, ok := cuc.mutation.IconURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: companyuser.FieldIconURL,
		})
		_node.IconURL = value
	}
	if value, ok := cuc.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: companyuser.FieldGender,
		})
		_node.Gender = value
	}
	return _node, _spec
}

// CompanyUserCreateBulk is the builder for creating many CompanyUser entities in bulk.
type CompanyUserCreateBulk struct {
	config
	builders []*CompanyUserCreate
}

// Save creates the CompanyUser entities in the database.
func (cucb *CompanyUserCreateBulk) Save(ctx context.Context) ([]*CompanyUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cucb.builders))
	nodes := make([]*CompanyUser, len(cucb.builders))
	mutators := make([]Mutator, len(cucb.builders))
	for i := range cucb.builders {
		func(i int, root context.Context) {
			builder := cucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompanyUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cucb *CompanyUserCreateBulk) SaveX(ctx context.Context) []*CompanyUser {
	v, err := cucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cucb *CompanyUserCreateBulk) Exec(ctx context.Context) error {
	_, err := cucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cucb *CompanyUserCreateBulk) ExecX(ctx context.Context) {
	if err := cucb.Exec(ctx); err != nil {
		panic(err)
	}
}
