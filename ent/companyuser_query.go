// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"devroute/ent/companyuser"
	"devroute/ent/predicate"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyUserQuery is the builder for querying CompanyUser entities.
type CompanyUserQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.CompanyUser
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CompanyUserQuery builder.
func (cuq *CompanyUserQuery) Where(ps ...predicate.CompanyUser) *CompanyUserQuery {
	cuq.predicates = append(cuq.predicates, ps...)
	return cuq
}

// Limit adds a limit step to the query.
func (cuq *CompanyUserQuery) Limit(limit int) *CompanyUserQuery {
	cuq.limit = &limit
	return cuq
}

// Offset adds an offset step to the query.
func (cuq *CompanyUserQuery) Offset(offset int) *CompanyUserQuery {
	cuq.offset = &offset
	return cuq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cuq *CompanyUserQuery) Unique(unique bool) *CompanyUserQuery {
	cuq.unique = &unique
	return cuq
}

// Order adds an order step to the query.
func (cuq *CompanyUserQuery) Order(o ...OrderFunc) *CompanyUserQuery {
	cuq.order = append(cuq.order, o...)
	return cuq
}

// First returns the first CompanyUser entity from the query.
// Returns a *NotFoundError when no CompanyUser was found.
func (cuq *CompanyUserQuery) First(ctx context.Context) (*CompanyUser, error) {
	nodes, err := cuq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{companyuser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cuq *CompanyUserQuery) FirstX(ctx context.Context) *CompanyUser {
	node, err := cuq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CompanyUser ID from the query.
// Returns a *NotFoundError when no CompanyUser ID was found.
func (cuq *CompanyUserQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cuq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{companyuser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cuq *CompanyUserQuery) FirstIDX(ctx context.Context) int {
	id, err := cuq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CompanyUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one CompanyUser entity is not found.
// Returns a *NotFoundError when no CompanyUser entities are found.
func (cuq *CompanyUserQuery) Only(ctx context.Context) (*CompanyUser, error) {
	nodes, err := cuq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{companyuser.Label}
	default:
		return nil, &NotSingularError{companyuser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cuq *CompanyUserQuery) OnlyX(ctx context.Context) *CompanyUser {
	node, err := cuq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CompanyUser ID in the query.
// Returns a *NotSingularError when exactly one CompanyUser ID is not found.
// Returns a *NotFoundError when no entities are found.
func (cuq *CompanyUserQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cuq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{companyuser.Label}
	default:
		err = &NotSingularError{companyuser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cuq *CompanyUserQuery) OnlyIDX(ctx context.Context) int {
	id, err := cuq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CompanyUsers.
func (cuq *CompanyUserQuery) All(ctx context.Context) ([]*CompanyUser, error) {
	if err := cuq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cuq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cuq *CompanyUserQuery) AllX(ctx context.Context) []*CompanyUser {
	nodes, err := cuq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CompanyUser IDs.
func (cuq *CompanyUserQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := cuq.Select(companyuser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cuq *CompanyUserQuery) IDsX(ctx context.Context) []int {
	ids, err := cuq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cuq *CompanyUserQuery) Count(ctx context.Context) (int, error) {
	if err := cuq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cuq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cuq *CompanyUserQuery) CountX(ctx context.Context) int {
	count, err := cuq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cuq *CompanyUserQuery) Exist(ctx context.Context) (bool, error) {
	if err := cuq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cuq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cuq *CompanyUserQuery) ExistX(ctx context.Context) bool {
	exist, err := cuq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CompanyUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cuq *CompanyUserQuery) Clone() *CompanyUserQuery {
	if cuq == nil {
		return nil
	}
	return &CompanyUserQuery{
		config:     cuq.config,
		limit:      cuq.limit,
		offset:     cuq.offset,
		order:      append([]OrderFunc{}, cuq.order...),
		predicates: append([]predicate.CompanyUser{}, cuq.predicates...),
		// clone intermediate query.
		sql:  cuq.sql.Clone(),
		path: cuq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		LastName string `json:"last_name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CompanyUser.Query().
//		GroupBy(companyuser.FieldLastName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (cuq *CompanyUserQuery) GroupBy(field string, fields ...string) *CompanyUserGroupBy {
	group := &CompanyUserGroupBy{config: cuq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cuq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		LastName string `json:"last_name,omitempty"`
//	}
//
//	client.CompanyUser.Query().
//		Select(companyuser.FieldLastName).
//		Scan(ctx, &v)
//
func (cuq *CompanyUserQuery) Select(fields ...string) *CompanyUserSelect {
	cuq.fields = append(cuq.fields, fields...)
	return &CompanyUserSelect{CompanyUserQuery: cuq}
}

func (cuq *CompanyUserQuery) prepareQuery(ctx context.Context) error {
	for _, f := range cuq.fields {
		if !companyuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cuq.path != nil {
		prev, err := cuq.path(ctx)
		if err != nil {
			return err
		}
		cuq.sql = prev
	}
	return nil
}

func (cuq *CompanyUserQuery) sqlAll(ctx context.Context) ([]*CompanyUser, error) {
	var (
		nodes = []*CompanyUser{}
		_spec = cuq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &CompanyUser{config: cuq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, cuq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (cuq *CompanyUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cuq.querySpec()
	return sqlgraph.CountNodes(ctx, cuq.driver, _spec)
}

func (cuq *CompanyUserQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := cuq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (cuq *CompanyUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   companyuser.Table,
			Columns: companyuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: companyuser.FieldID,
			},
		},
		From:   cuq.sql,
		Unique: true,
	}
	if unique := cuq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := cuq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, companyuser.FieldID)
		for i := range fields {
			if fields[i] != companyuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cuq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cuq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cuq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cuq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cuq *CompanyUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cuq.driver.Dialect())
	t1 := builder.Table(companyuser.Table)
	columns := cuq.fields
	if len(columns) == 0 {
		columns = companyuser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cuq.sql != nil {
		selector = cuq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range cuq.predicates {
		p(selector)
	}
	for _, p := range cuq.order {
		p(selector)
	}
	if offset := cuq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cuq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CompanyUserGroupBy is the group-by builder for CompanyUser entities.
type CompanyUserGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cugb *CompanyUserGroupBy) Aggregate(fns ...AggregateFunc) *CompanyUserGroupBy {
	cugb.fns = append(cugb.fns, fns...)
	return cugb
}

// Scan applies the group-by query and scans the result into the given value.
func (cugb *CompanyUserGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := cugb.path(ctx)
	if err != nil {
		return err
	}
	cugb.sql = query
	return cugb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cugb *CompanyUserGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := cugb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (cugb *CompanyUserGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(cugb.fields) > 1 {
		return nil, errors.New("ent: CompanyUserGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := cugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cugb *CompanyUserGroupBy) StringsX(ctx context.Context) []string {
	v, err := cugb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cugb *CompanyUserGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cugb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{companyuser.Label}
	default:
		err = fmt.Errorf("ent: CompanyUserGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cugb *CompanyUserGroupBy) StringX(ctx context.Context) string {
	v, err := cugb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (cugb *CompanyUserGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(cugb.fields) > 1 {
		return nil, errors.New("ent: CompanyUserGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := cugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cugb *CompanyUserGroupBy) IntsX(ctx context.Context) []int {
	v, err := cugb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cugb *CompanyUserGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cugb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{companyuser.Label}
	default:
		err = fmt.Errorf("ent: CompanyUserGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cugb *CompanyUserGroupBy) IntX(ctx context.Context) int {
	v, err := cugb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (cugb *CompanyUserGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(cugb.fields) > 1 {
		return nil, errors.New("ent: CompanyUserGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := cugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cugb *CompanyUserGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := cugb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cugb *CompanyUserGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cugb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{companyuser.Label}
	default:
		err = fmt.Errorf("ent: CompanyUserGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cugb *CompanyUserGroupBy) Float64X(ctx context.Context) float64 {
	v, err := cugb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (cugb *CompanyUserGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(cugb.fields) > 1 {
		return nil, errors.New("ent: CompanyUserGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := cugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cugb *CompanyUserGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := cugb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cugb *CompanyUserGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cugb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{companyuser.Label}
	default:
		err = fmt.Errorf("ent: CompanyUserGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cugb *CompanyUserGroupBy) BoolX(ctx context.Context) bool {
	v, err := cugb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cugb *CompanyUserGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range cugb.fields {
		if !companyuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cugb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cugb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cugb *CompanyUserGroupBy) sqlQuery() *sql.Selector {
	selector := cugb.sql.Select()
	aggregation := make([]string, 0, len(cugb.fns))
	for _, fn := range cugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(cugb.fields)+len(cugb.fns))
		for _, f := range cugb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(cugb.fields...)...)
}

// CompanyUserSelect is the builder for selecting fields of CompanyUser entities.
type CompanyUserSelect struct {
	*CompanyUserQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (cus *CompanyUserSelect) Scan(ctx context.Context, v interface{}) error {
	if err := cus.prepareQuery(ctx); err != nil {
		return err
	}
	cus.sql = cus.CompanyUserQuery.sqlQuery(ctx)
	return cus.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cus *CompanyUserSelect) ScanX(ctx context.Context, v interface{}) {
	if err := cus.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (cus *CompanyUserSelect) Strings(ctx context.Context) ([]string, error) {
	if len(cus.fields) > 1 {
		return nil, errors.New("ent: CompanyUserSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := cus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cus *CompanyUserSelect) StringsX(ctx context.Context) []string {
	v, err := cus.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (cus *CompanyUserSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cus.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{companyuser.Label}
	default:
		err = fmt.Errorf("ent: CompanyUserSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cus *CompanyUserSelect) StringX(ctx context.Context) string {
	v, err := cus.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (cus *CompanyUserSelect) Ints(ctx context.Context) ([]int, error) {
	if len(cus.fields) > 1 {
		return nil, errors.New("ent: CompanyUserSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := cus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cus *CompanyUserSelect) IntsX(ctx context.Context) []int {
	v, err := cus.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (cus *CompanyUserSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cus.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{companyuser.Label}
	default:
		err = fmt.Errorf("ent: CompanyUserSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cus *CompanyUserSelect) IntX(ctx context.Context) int {
	v, err := cus.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (cus *CompanyUserSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(cus.fields) > 1 {
		return nil, errors.New("ent: CompanyUserSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := cus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cus *CompanyUserSelect) Float64sX(ctx context.Context) []float64 {
	v, err := cus.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (cus *CompanyUserSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cus.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{companyuser.Label}
	default:
		err = fmt.Errorf("ent: CompanyUserSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cus *CompanyUserSelect) Float64X(ctx context.Context) float64 {
	v, err := cus.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (cus *CompanyUserSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(cus.fields) > 1 {
		return nil, errors.New("ent: CompanyUserSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := cus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cus *CompanyUserSelect) BoolsX(ctx context.Context) []bool {
	v, err := cus.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (cus *CompanyUserSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cus.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{companyuser.Label}
	default:
		err = fmt.Errorf("ent: CompanyUserSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cus *CompanyUserSelect) BoolX(ctx context.Context) bool {
	v, err := cus.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cus *CompanyUserSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := cus.sql.Query()
	if err := cus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
